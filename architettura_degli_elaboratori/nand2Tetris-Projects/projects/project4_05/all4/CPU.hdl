// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// C1
    Not(in = instruction[15], out = notISTR15);
    // Mux1
    Mux16(a = outALU, b = instruction, sel = notISTR15, out = outMUX1);

    // C2
    Or(a = notISTR15, b = instruction[5], out= C2loadAR);
    // A-REGISTER
    ARegister(in = outMUX1, load = C2loadAR, out = AREGISTERout, out[0..14] = addressM); // chiarire addressM

    // C3
    And(a = instruction[15], b = instruction[12], out = C3modifyM);
    // Mux2
	Mux16(a = AREGISTERout, b = inM, sel = C3modifyM, out = outMUX2);

    // C4 Ã¨ uno dei sei bit delle operazioni dell'ALU
	// ALU
    ALU(x = DREGISTERout, y = outMUX2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outALU, out = outM, zr = zr, ng = ng);

    // C5
    And(a = instruction[15], b = instruction[4], out = C5loadDR);
    // D-REGISTER
    DRegister(in = outALU, load = C5loadDR, out = DREGISTERout);

    // C6
    And(a = instruction[15], b = instruction[3], out = writeM);
    
    // C7.0/7.1
    
    // Si controlla se out > 0 
    // Si negano i due bit di output dell'ALU per un motivo analogo a C1, C2 con il registro A
    Not(in = zr, out = notZR);
    Not(in = ng, out = notNG);
    And(a = notZR, b = notNG, out = outisGT);
    And(a = instruction[0], b = outisGT, out = jgt);
    
    // Si controlla se out = 0
    And(a = instruction[1], b = zr, out = jeq);
    
    // Si controlla se out < 0
    And(a = instruction[2], b = ng, out = jlt);

    // Controlla se il bus instruction richiede una operazione di controllo e se essa risulti vera o meno 
    Or(a = jgt, b = jeq, out = jgtORjeq);
    Or(a = jgtORjeq, b = jlt, out = jgtORjeqORjlt);

    // Controlla che si tratti di una C-instruction
    And(a = instruction[15], b = jgtORjeqORjlt, out = JUMPres);

    // PC
    PC(in = AREGISTERout, load = JUMPres, inc = true, reset = reset, out[0..14] = pc); 
    
}