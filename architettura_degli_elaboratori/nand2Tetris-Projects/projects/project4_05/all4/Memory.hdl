// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

/* PREMESSE:
	- Si ricorda che Screen ha un funzionamento analogo a quello do RAM e, in HDL è un circuito identico a RAM 
*/

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	// Si decreta quale dei tre componenti (RAM, Screen, Keyboard) si debba adoperaro, in quanto se ne può adoperare soltanto uno alla volta.
	// Daro che i componenti sono 3 e le Way del DMux sono 4, se ne attribuiscono due alla RAM (compoente più predisposto a ricevere qusto trattamento).
	DMux4Way (in = load, sel = address[13..14], a = SELram1, b = SELram2, c = SELscreen, d = SELkeyboard);
    
	// Si usa una Or per capire se usa delle due scelte della RAM sia attiva o meno.
	Or (a = SELram1, b = SELram2, out = SELram);
	
	// La RAM prende in input in[16], come load SELram (*)
	// (*) Se SELram è 1 si scrive sulla RAM; altrimenti se è 0 la RAM (credo) viene soltanto letta, ma comunque ha un comportamnto passivo (sempre se load = 0).
	RAM16K (in = in, load = SELram, address = address[0..13], out = ramOUT);
	
	// Stesso ragionamento fatto per la RAM, in quanto *vedi premesse*
	Screen (in = in, load = SELscreen, address = address[0..12], out = screenOUT);
	
	// La tastiera ha soltanto un output, non ho ben capito.
	Keyboard (out = keyboardOUT);
	
	// In modo analogo al DMux4Way, si decide cosa porre sul bus di uscita.
	// (in quanto si forniscono gli stessi valori di address, il componente selezionato sarà anche lo stesso che scriverà sul bus di uscita)
	Mux4Way16 (a = ramOUT, b = ramOUT, c = screenOUT, d = keyboardOUT, sel = address[13..14], out = out);
	
}